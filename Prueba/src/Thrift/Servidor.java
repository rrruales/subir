/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-24")
public class Servidor {

  public interface Iface {

    public java.lang.String Usuario(java.lang.String dato1, java.lang.String dato2, java.lang.String dato3) throws org.apache.thrift.TException;

    public java.lang.String Venue(java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String comp) throws org.apache.thrift.TException;

    public java.lang.String Evento(java.lang.String rar1, java.lang.String rar2, java.lang.String rar3, java.lang.String rar4, java.lang.String conc) throws org.apache.thrift.TException;

    public java.lang.String Login(java.lang.String sas1, java.lang.String sas2) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> Mostrar() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Usuario(java.lang.String dato1, java.lang.String dato2, java.lang.String dato3, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Venue(java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String comp, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Evento(java.lang.String rar1, java.lang.String rar2, java.lang.String rar3, java.lang.String rar4, java.lang.String conc, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Login(java.lang.String sas1, java.lang.String sas2, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Mostrar(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String Usuario(java.lang.String dato1, java.lang.String dato2, java.lang.String dato3) throws org.apache.thrift.TException
    {
      send_Usuario(dato1, dato2, dato3);
      return recv_Usuario();
    }

    public void send_Usuario(java.lang.String dato1, java.lang.String dato2, java.lang.String dato3) throws org.apache.thrift.TException
    {
      Usuario_args args = new Usuario_args();
      args.setDato1(dato1);
      args.setDato2(dato2);
      args.setDato3(dato3);
      sendBase("Usuario", args);
    }

    public java.lang.String recv_Usuario() throws org.apache.thrift.TException
    {
      Usuario_result result = new Usuario_result();
      receiveBase(result, "Usuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Usuario failed: unknown result");
    }

    public java.lang.String Venue(java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String comp) throws org.apache.thrift.TException
    {
      send_Venue(var1, var2, var3, var4, comp);
      return recv_Venue();
    }

    public void send_Venue(java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String comp) throws org.apache.thrift.TException
    {
      Venue_args args = new Venue_args();
      args.setVar1(var1);
      args.setVar2(var2);
      args.setVar3(var3);
      args.setVar4(var4);
      args.setComp(comp);
      sendBase("Venue", args);
    }

    public java.lang.String recv_Venue() throws org.apache.thrift.TException
    {
      Venue_result result = new Venue_result();
      receiveBase(result, "Venue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Venue failed: unknown result");
    }

    public java.lang.String Evento(java.lang.String rar1, java.lang.String rar2, java.lang.String rar3, java.lang.String rar4, java.lang.String conc) throws org.apache.thrift.TException
    {
      send_Evento(rar1, rar2, rar3, rar4, conc);
      return recv_Evento();
    }

    public void send_Evento(java.lang.String rar1, java.lang.String rar2, java.lang.String rar3, java.lang.String rar4, java.lang.String conc) throws org.apache.thrift.TException
    {
      Evento_args args = new Evento_args();
      args.setRar1(rar1);
      args.setRar2(rar2);
      args.setRar3(rar3);
      args.setRar4(rar4);
      args.setConc(conc);
      sendBase("Evento", args);
    }

    public java.lang.String recv_Evento() throws org.apache.thrift.TException
    {
      Evento_result result = new Evento_result();
      receiveBase(result, "Evento");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Evento failed: unknown result");
    }

    public java.lang.String Login(java.lang.String sas1, java.lang.String sas2) throws org.apache.thrift.TException
    {
      send_Login(sas1, sas2);
      return recv_Login();
    }

    public void send_Login(java.lang.String sas1, java.lang.String sas2) throws org.apache.thrift.TException
    {
      Login_args args = new Login_args();
      args.setSas1(sas1);
      args.setSas2(sas2);
      sendBase("Login", args);
    }

    public java.lang.String recv_Login() throws org.apache.thrift.TException
    {
      Login_result result = new Login_result();
      receiveBase(result, "Login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Login failed: unknown result");
    }

    public java.util.List<java.lang.String> Mostrar() throws org.apache.thrift.TException
    {
      send_Mostrar();
      return recv_Mostrar();
    }

    public void send_Mostrar() throws org.apache.thrift.TException
    {
      Mostrar_args args = new Mostrar_args();
      sendBase("Mostrar", args);
    }

    public java.util.List<java.lang.String> recv_Mostrar() throws org.apache.thrift.TException
    {
      Mostrar_result result = new Mostrar_result();
      receiveBase(result, "Mostrar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Mostrar failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Usuario(java.lang.String dato1, java.lang.String dato2, java.lang.String dato3, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Usuario_call method_call = new Usuario_call(dato1, dato2, dato3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Usuario_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String dato1;
      private java.lang.String dato2;
      private java.lang.String dato3;
      public Usuario_call(java.lang.String dato1, java.lang.String dato2, java.lang.String dato3, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dato1 = dato1;
        this.dato2 = dato2;
        this.dato3 = dato3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Usuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Usuario_args args = new Usuario_args();
        args.setDato1(dato1);
        args.setDato2(dato2);
        args.setDato3(dato3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Usuario();
      }
    }

    public void Venue(java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String comp, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Venue_call method_call = new Venue_call(var1, var2, var3, var4, comp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Venue_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String var1;
      private java.lang.String var2;
      private java.lang.String var3;
      private java.lang.String var4;
      private java.lang.String comp;
      public Venue_call(java.lang.String var1, java.lang.String var2, java.lang.String var3, java.lang.String var4, java.lang.String comp, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.var1 = var1;
        this.var2 = var2;
        this.var3 = var3;
        this.var4 = var4;
        this.comp = comp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Venue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Venue_args args = new Venue_args();
        args.setVar1(var1);
        args.setVar2(var2);
        args.setVar3(var3);
        args.setVar4(var4);
        args.setComp(comp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Venue();
      }
    }

    public void Evento(java.lang.String rar1, java.lang.String rar2, java.lang.String rar3, java.lang.String rar4, java.lang.String conc, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Evento_call method_call = new Evento_call(rar1, rar2, rar3, rar4, conc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Evento_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String rar1;
      private java.lang.String rar2;
      private java.lang.String rar3;
      private java.lang.String rar4;
      private java.lang.String conc;
      public Evento_call(java.lang.String rar1, java.lang.String rar2, java.lang.String rar3, java.lang.String rar4, java.lang.String conc, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rar1 = rar1;
        this.rar2 = rar2;
        this.rar3 = rar3;
        this.rar4 = rar4;
        this.conc = conc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Evento", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Evento_args args = new Evento_args();
        args.setRar1(rar1);
        args.setRar2(rar2);
        args.setRar3(rar3);
        args.setRar4(rar4);
        args.setConc(conc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Evento();
      }
    }

    public void Login(java.lang.String sas1, java.lang.String sas2, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Login_call method_call = new Login_call(sas1, sas2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Login_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String sas1;
      private java.lang.String sas2;
      public Login_call(java.lang.String sas1, java.lang.String sas2, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sas1 = sas1;
        this.sas2 = sas2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Login_args args = new Login_args();
        args.setSas1(sas1);
        args.setSas2(sas2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Login();
      }
    }

    public void Mostrar(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Mostrar_call method_call = new Mostrar_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Mostrar_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public Mostrar_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Mostrar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Mostrar_args args = new Mostrar_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Mostrar();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Usuario", new Usuario());
      processMap.put("Venue", new Venue());
      processMap.put("Evento", new Evento());
      processMap.put("Login", new Login());
      processMap.put("Mostrar", new Mostrar());
      return processMap;
    }

    public static class Usuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Usuario_args> {
      public Usuario() {
        super("Usuario");
      }

      public Usuario_args getEmptyArgsInstance() {
        return new Usuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Usuario_result getResult(I iface, Usuario_args args) throws org.apache.thrift.TException {
        Usuario_result result = new Usuario_result();
        result.success = iface.Usuario(args.dato1, args.dato2, args.dato3);
        return result;
      }
    }

    public static class Venue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Venue_args> {
      public Venue() {
        super("Venue");
      }

      public Venue_args getEmptyArgsInstance() {
        return new Venue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Venue_result getResult(I iface, Venue_args args) throws org.apache.thrift.TException {
        Venue_result result = new Venue_result();
        result.success = iface.Venue(args.var1, args.var2, args.var3, args.var4, args.comp);
        return result;
      }
    }

    public static class Evento<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Evento_args> {
      public Evento() {
        super("Evento");
      }

      public Evento_args getEmptyArgsInstance() {
        return new Evento_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Evento_result getResult(I iface, Evento_args args) throws org.apache.thrift.TException {
        Evento_result result = new Evento_result();
        result.success = iface.Evento(args.rar1, args.rar2, args.rar3, args.rar4, args.conc);
        return result;
      }
    }

    public static class Login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Login_args> {
      public Login() {
        super("Login");
      }

      public Login_args getEmptyArgsInstance() {
        return new Login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Login_result getResult(I iface, Login_args args) throws org.apache.thrift.TException {
        Login_result result = new Login_result();
        result.success = iface.Login(args.sas1, args.sas2);
        return result;
      }
    }

    public static class Mostrar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Mostrar_args> {
      public Mostrar() {
        super("Mostrar");
      }

      public Mostrar_args getEmptyArgsInstance() {
        return new Mostrar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Mostrar_result getResult(I iface, Mostrar_args args) throws org.apache.thrift.TException {
        Mostrar_result result = new Mostrar_result();
        result.success = iface.Mostrar();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Usuario", new Usuario());
      processMap.put("Venue", new Venue());
      processMap.put("Evento", new Evento());
      processMap.put("Login", new Login());
      processMap.put("Mostrar", new Mostrar());
      return processMap;
    }

    public static class Usuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Usuario_args, java.lang.String> {
      public Usuario() {
        super("Usuario");
      }

      public Usuario_args getEmptyArgsInstance() {
        return new Usuario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            Usuario_result result = new Usuario_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Usuario_result result = new Usuario_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Usuario_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Usuario(args.dato1, args.dato2, args.dato3,resultHandler);
      }
    }

    public static class Venue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Venue_args, java.lang.String> {
      public Venue() {
        super("Venue");
      }

      public Venue_args getEmptyArgsInstance() {
        return new Venue_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            Venue_result result = new Venue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Venue_result result = new Venue_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Venue_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Venue(args.var1, args.var2, args.var3, args.var4, args.comp,resultHandler);
      }
    }

    public static class Evento<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Evento_args, java.lang.String> {
      public Evento() {
        super("Evento");
      }

      public Evento_args getEmptyArgsInstance() {
        return new Evento_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            Evento_result result = new Evento_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Evento_result result = new Evento_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Evento_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Evento(args.rar1, args.rar2, args.rar3, args.rar4, args.conc,resultHandler);
      }
    }

    public static class Login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Login_args, java.lang.String> {
      public Login() {
        super("Login");
      }

      public Login_args getEmptyArgsInstance() {
        return new Login_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            Login_result result = new Login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Login_result result = new Login_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Login_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Login(args.sas1, args.sas2,resultHandler);
      }
    }

    public static class Mostrar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Mostrar_args, java.util.List<java.lang.String>> {
      public Mostrar() {
        super("Mostrar");
      }

      public Mostrar_args getEmptyArgsInstance() {
        return new Mostrar_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            Mostrar_result result = new Mostrar_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Mostrar_result result = new Mostrar_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Mostrar_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.Mostrar(resultHandler);
      }
    }

  }

  public static class Usuario_args implements org.apache.thrift.TBase<Usuario_args, Usuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<Usuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Usuario_args");

    private static final org.apache.thrift.protocol.TField DATO1_FIELD_DESC = new org.apache.thrift.protocol.TField("dato1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATO2_FIELD_DESC = new org.apache.thrift.protocol.TField("dato2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATO3_FIELD_DESC = new org.apache.thrift.protocol.TField("dato3", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Usuario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Usuario_argsTupleSchemeFactory();

    public java.lang.String dato1; // required
    public java.lang.String dato2; // required
    public java.lang.String dato3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATO1((short)1, "dato1"),
      DATO2((short)2, "dato2"),
      DATO3((short)3, "dato3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATO1
            return DATO1;
          case 2: // DATO2
            return DATO2;
          case 3: // DATO3
            return DATO3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATO1, new org.apache.thrift.meta_data.FieldMetaData("dato1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATO2, new org.apache.thrift.meta_data.FieldMetaData("dato2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATO3, new org.apache.thrift.meta_data.FieldMetaData("dato3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Usuario_args.class, metaDataMap);
    }

    public Usuario_args() {
    }

    public Usuario_args(
      java.lang.String dato1,
      java.lang.String dato2,
      java.lang.String dato3)
    {
      this();
      this.dato1 = dato1;
      this.dato2 = dato2;
      this.dato3 = dato3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Usuario_args(Usuario_args other) {
      if (other.isSetDato1()) {
        this.dato1 = other.dato1;
      }
      if (other.isSetDato2()) {
        this.dato2 = other.dato2;
      }
      if (other.isSetDato3()) {
        this.dato3 = other.dato3;
      }
    }

    public Usuario_args deepCopy() {
      return new Usuario_args(this);
    }

    @Override
    public void clear() {
      this.dato1 = null;
      this.dato2 = null;
      this.dato3 = null;
    }

    public java.lang.String getDato1() {
      return this.dato1;
    }

    public Usuario_args setDato1(java.lang.String dato1) {
      this.dato1 = dato1;
      return this;
    }

    public void unsetDato1() {
      this.dato1 = null;
    }

    /** Returns true if field dato1 is set (has been assigned a value) and false otherwise */
    public boolean isSetDato1() {
      return this.dato1 != null;
    }

    public void setDato1IsSet(boolean value) {
      if (!value) {
        this.dato1 = null;
      }
    }

    public java.lang.String getDato2() {
      return this.dato2;
    }

    public Usuario_args setDato2(java.lang.String dato2) {
      this.dato2 = dato2;
      return this;
    }

    public void unsetDato2() {
      this.dato2 = null;
    }

    /** Returns true if field dato2 is set (has been assigned a value) and false otherwise */
    public boolean isSetDato2() {
      return this.dato2 != null;
    }

    public void setDato2IsSet(boolean value) {
      if (!value) {
        this.dato2 = null;
      }
    }

    public java.lang.String getDato3() {
      return this.dato3;
    }

    public Usuario_args setDato3(java.lang.String dato3) {
      this.dato3 = dato3;
      return this;
    }

    public void unsetDato3() {
      this.dato3 = null;
    }

    /** Returns true if field dato3 is set (has been assigned a value) and false otherwise */
    public boolean isSetDato3() {
      return this.dato3 != null;
    }

    public void setDato3IsSet(boolean value) {
      if (!value) {
        this.dato3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DATO1:
        if (value == null) {
          unsetDato1();
        } else {
          setDato1((java.lang.String)value);
        }
        break;

      case DATO2:
        if (value == null) {
          unsetDato2();
        } else {
          setDato2((java.lang.String)value);
        }
        break;

      case DATO3:
        if (value == null) {
          unsetDato3();
        } else {
          setDato3((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATO1:
        return getDato1();

      case DATO2:
        return getDato2();

      case DATO3:
        return getDato3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATO1:
        return isSetDato1();
      case DATO2:
        return isSetDato2();
      case DATO3:
        return isSetDato3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Usuario_args)
        return this.equals((Usuario_args)that);
      return false;
    }

    public boolean equals(Usuario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dato1 = true && this.isSetDato1();
      boolean that_present_dato1 = true && that.isSetDato1();
      if (this_present_dato1 || that_present_dato1) {
        if (!(this_present_dato1 && that_present_dato1))
          return false;
        if (!this.dato1.equals(that.dato1))
          return false;
      }

      boolean this_present_dato2 = true && this.isSetDato2();
      boolean that_present_dato2 = true && that.isSetDato2();
      if (this_present_dato2 || that_present_dato2) {
        if (!(this_present_dato2 && that_present_dato2))
          return false;
        if (!this.dato2.equals(that.dato2))
          return false;
      }

      boolean this_present_dato3 = true && this.isSetDato3();
      boolean that_present_dato3 = true && that.isSetDato3();
      if (this_present_dato3 || that_present_dato3) {
        if (!(this_present_dato3 && that_present_dato3))
          return false;
        if (!this.dato3.equals(that.dato3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDato1()) ? 131071 : 524287);
      if (isSetDato1())
        hashCode = hashCode * 8191 + dato1.hashCode();

      hashCode = hashCode * 8191 + ((isSetDato2()) ? 131071 : 524287);
      if (isSetDato2())
        hashCode = hashCode * 8191 + dato2.hashCode();

      hashCode = hashCode * 8191 + ((isSetDato3()) ? 131071 : 524287);
      if (isSetDato3())
        hashCode = hashCode * 8191 + dato3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Usuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDato1()).compareTo(other.isSetDato1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDato1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dato1, other.dato1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDato2()).compareTo(other.isSetDato2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDato2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dato2, other.dato2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDato3()).compareTo(other.isSetDato3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDato3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dato3, other.dato3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Usuario_args(");
      boolean first = true;

      sb.append("dato1:");
      if (this.dato1 == null) {
        sb.append("null");
      } else {
        sb.append(this.dato1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dato2:");
      if (this.dato2 == null) {
        sb.append("null");
      } else {
        sb.append(this.dato2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dato3:");
      if (this.dato3 == null) {
        sb.append("null");
      } else {
        sb.append(this.dato3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Usuario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Usuario_argsStandardScheme getScheme() {
        return new Usuario_argsStandardScheme();
      }
    }

    private static class Usuario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Usuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Usuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATO1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dato1 = iprot.readString();
                struct.setDato1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATO2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dato2 = iprot.readString();
                struct.setDato2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATO3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dato3 = iprot.readString();
                struct.setDato3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Usuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dato1 != null) {
          oprot.writeFieldBegin(DATO1_FIELD_DESC);
          oprot.writeString(struct.dato1);
          oprot.writeFieldEnd();
        }
        if (struct.dato2 != null) {
          oprot.writeFieldBegin(DATO2_FIELD_DESC);
          oprot.writeString(struct.dato2);
          oprot.writeFieldEnd();
        }
        if (struct.dato3 != null) {
          oprot.writeFieldBegin(DATO3_FIELD_DESC);
          oprot.writeString(struct.dato3);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Usuario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Usuario_argsTupleScheme getScheme() {
        return new Usuario_argsTupleScheme();
      }
    }

    private static class Usuario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Usuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Usuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDato1()) {
          optionals.set(0);
        }
        if (struct.isSetDato2()) {
          optionals.set(1);
        }
        if (struct.isSetDato3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDato1()) {
          oprot.writeString(struct.dato1);
        }
        if (struct.isSetDato2()) {
          oprot.writeString(struct.dato2);
        }
        if (struct.isSetDato3()) {
          oprot.writeString(struct.dato3);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Usuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dato1 = iprot.readString();
          struct.setDato1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.dato2 = iprot.readString();
          struct.setDato2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.dato3 = iprot.readString();
          struct.setDato3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Usuario_result implements org.apache.thrift.TBase<Usuario_result, Usuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<Usuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Usuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Usuario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Usuario_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Usuario_result.class, metaDataMap);
    }

    public Usuario_result() {
    }

    public Usuario_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Usuario_result(Usuario_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Usuario_result deepCopy() {
      return new Usuario_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public Usuario_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Usuario_result)
        return this.equals((Usuario_result)that);
      return false;
    }

    public boolean equals(Usuario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Usuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Usuario_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Usuario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Usuario_resultStandardScheme getScheme() {
        return new Usuario_resultStandardScheme();
      }
    }

    private static class Usuario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Usuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Usuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Usuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Usuario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Usuario_resultTupleScheme getScheme() {
        return new Usuario_resultTupleScheme();
      }
    }

    private static class Usuario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Usuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Usuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Usuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Venue_args implements org.apache.thrift.TBase<Venue_args, Venue_args._Fields>, java.io.Serializable, Cloneable, Comparable<Venue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Venue_args");

    private static final org.apache.thrift.protocol.TField VAR1_FIELD_DESC = new org.apache.thrift.protocol.TField("var1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VAR2_FIELD_DESC = new org.apache.thrift.protocol.TField("var2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VAR3_FIELD_DESC = new org.apache.thrift.protocol.TField("var3", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VAR4_FIELD_DESC = new org.apache.thrift.protocol.TField("var4", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField COMP_FIELD_DESC = new org.apache.thrift.protocol.TField("comp", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Venue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Venue_argsTupleSchemeFactory();

    public java.lang.String var1; // required
    public java.lang.String var2; // required
    public java.lang.String var3; // required
    public java.lang.String var4; // required
    public java.lang.String comp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR1((short)1, "var1"),
      VAR2((short)2, "var2"),
      VAR3((short)3, "var3"),
      VAR4((short)4, "var4"),
      COMP((short)5, "comp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR1
            return VAR1;
          case 2: // VAR2
            return VAR2;
          case 3: // VAR3
            return VAR3;
          case 4: // VAR4
            return VAR4;
          case 5: // COMP
            return COMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR1, new org.apache.thrift.meta_data.FieldMetaData("var1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VAR2, new org.apache.thrift.meta_data.FieldMetaData("var2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VAR3, new org.apache.thrift.meta_data.FieldMetaData("var3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VAR4, new org.apache.thrift.meta_data.FieldMetaData("var4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMP, new org.apache.thrift.meta_data.FieldMetaData("comp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Venue_args.class, metaDataMap);
    }

    public Venue_args() {
    }

    public Venue_args(
      java.lang.String var1,
      java.lang.String var2,
      java.lang.String var3,
      java.lang.String var4,
      java.lang.String comp)
    {
      this();
      this.var1 = var1;
      this.var2 = var2;
      this.var3 = var3;
      this.var4 = var4;
      this.comp = comp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Venue_args(Venue_args other) {
      if (other.isSetVar1()) {
        this.var1 = other.var1;
      }
      if (other.isSetVar2()) {
        this.var2 = other.var2;
      }
      if (other.isSetVar3()) {
        this.var3 = other.var3;
      }
      if (other.isSetVar4()) {
        this.var4 = other.var4;
      }
      if (other.isSetComp()) {
        this.comp = other.comp;
      }
    }

    public Venue_args deepCopy() {
      return new Venue_args(this);
    }

    @Override
    public void clear() {
      this.var1 = null;
      this.var2 = null;
      this.var3 = null;
      this.var4 = null;
      this.comp = null;
    }

    public java.lang.String getVar1() {
      return this.var1;
    }

    public Venue_args setVar1(java.lang.String var1) {
      this.var1 = var1;
      return this;
    }

    public void unsetVar1() {
      this.var1 = null;
    }

    /** Returns true if field var1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVar1() {
      return this.var1 != null;
    }

    public void setVar1IsSet(boolean value) {
      if (!value) {
        this.var1 = null;
      }
    }

    public java.lang.String getVar2() {
      return this.var2;
    }

    public Venue_args setVar2(java.lang.String var2) {
      this.var2 = var2;
      return this;
    }

    public void unsetVar2() {
      this.var2 = null;
    }

    /** Returns true if field var2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVar2() {
      return this.var2 != null;
    }

    public void setVar2IsSet(boolean value) {
      if (!value) {
        this.var2 = null;
      }
    }

    public java.lang.String getVar3() {
      return this.var3;
    }

    public Venue_args setVar3(java.lang.String var3) {
      this.var3 = var3;
      return this;
    }

    public void unsetVar3() {
      this.var3 = null;
    }

    /** Returns true if field var3 is set (has been assigned a value) and false otherwise */
    public boolean isSetVar3() {
      return this.var3 != null;
    }

    public void setVar3IsSet(boolean value) {
      if (!value) {
        this.var3 = null;
      }
    }

    public java.lang.String getVar4() {
      return this.var4;
    }

    public Venue_args setVar4(java.lang.String var4) {
      this.var4 = var4;
      return this;
    }

    public void unsetVar4() {
      this.var4 = null;
    }

    /** Returns true if field var4 is set (has been assigned a value) and false otherwise */
    public boolean isSetVar4() {
      return this.var4 != null;
    }

    public void setVar4IsSet(boolean value) {
      if (!value) {
        this.var4 = null;
      }
    }

    public java.lang.String getComp() {
      return this.comp;
    }

    public Venue_args setComp(java.lang.String comp) {
      this.comp = comp;
      return this;
    }

    public void unsetComp() {
      this.comp = null;
    }

    /** Returns true if field comp is set (has been assigned a value) and false otherwise */
    public boolean isSetComp() {
      return this.comp != null;
    }

    public void setCompIsSet(boolean value) {
      if (!value) {
        this.comp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case VAR1:
        if (value == null) {
          unsetVar1();
        } else {
          setVar1((java.lang.String)value);
        }
        break;

      case VAR2:
        if (value == null) {
          unsetVar2();
        } else {
          setVar2((java.lang.String)value);
        }
        break;

      case VAR3:
        if (value == null) {
          unsetVar3();
        } else {
          setVar3((java.lang.String)value);
        }
        break;

      case VAR4:
        if (value == null) {
          unsetVar4();
        } else {
          setVar4((java.lang.String)value);
        }
        break;

      case COMP:
        if (value == null) {
          unsetComp();
        } else {
          setComp((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR1:
        return getVar1();

      case VAR2:
        return getVar2();

      case VAR3:
        return getVar3();

      case VAR4:
        return getVar4();

      case COMP:
        return getComp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR1:
        return isSetVar1();
      case VAR2:
        return isSetVar2();
      case VAR3:
        return isSetVar3();
      case VAR4:
        return isSetVar4();
      case COMP:
        return isSetComp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Venue_args)
        return this.equals((Venue_args)that);
      return false;
    }

    public boolean equals(Venue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_var1 = true && this.isSetVar1();
      boolean that_present_var1 = true && that.isSetVar1();
      if (this_present_var1 || that_present_var1) {
        if (!(this_present_var1 && that_present_var1))
          return false;
        if (!this.var1.equals(that.var1))
          return false;
      }

      boolean this_present_var2 = true && this.isSetVar2();
      boolean that_present_var2 = true && that.isSetVar2();
      if (this_present_var2 || that_present_var2) {
        if (!(this_present_var2 && that_present_var2))
          return false;
        if (!this.var2.equals(that.var2))
          return false;
      }

      boolean this_present_var3 = true && this.isSetVar3();
      boolean that_present_var3 = true && that.isSetVar3();
      if (this_present_var3 || that_present_var3) {
        if (!(this_present_var3 && that_present_var3))
          return false;
        if (!this.var3.equals(that.var3))
          return false;
      }

      boolean this_present_var4 = true && this.isSetVar4();
      boolean that_present_var4 = true && that.isSetVar4();
      if (this_present_var4 || that_present_var4) {
        if (!(this_present_var4 && that_present_var4))
          return false;
        if (!this.var4.equals(that.var4))
          return false;
      }

      boolean this_present_comp = true && this.isSetComp();
      boolean that_present_comp = true && that.isSetComp();
      if (this_present_comp || that_present_comp) {
        if (!(this_present_comp && that_present_comp))
          return false;
        if (!this.comp.equals(that.comp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVar1()) ? 131071 : 524287);
      if (isSetVar1())
        hashCode = hashCode * 8191 + var1.hashCode();

      hashCode = hashCode * 8191 + ((isSetVar2()) ? 131071 : 524287);
      if (isSetVar2())
        hashCode = hashCode * 8191 + var2.hashCode();

      hashCode = hashCode * 8191 + ((isSetVar3()) ? 131071 : 524287);
      if (isSetVar3())
        hashCode = hashCode * 8191 + var3.hashCode();

      hashCode = hashCode * 8191 + ((isSetVar4()) ? 131071 : 524287);
      if (isSetVar4())
        hashCode = hashCode * 8191 + var4.hashCode();

      hashCode = hashCode * 8191 + ((isSetComp()) ? 131071 : 524287);
      if (isSetComp())
        hashCode = hashCode * 8191 + comp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Venue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetVar1()).compareTo(other.isSetVar1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVar1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var1, other.var1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVar2()).compareTo(other.isSetVar2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVar2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var2, other.var2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVar3()).compareTo(other.isSetVar3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVar3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var3, other.var3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVar4()).compareTo(other.isSetVar4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVar4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var4, other.var4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetComp()).compareTo(other.isSetComp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comp, other.comp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Venue_args(");
      boolean first = true;

      sb.append("var1:");
      if (this.var1 == null) {
        sb.append("null");
      } else {
        sb.append(this.var1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("var2:");
      if (this.var2 == null) {
        sb.append("null");
      } else {
        sb.append(this.var2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("var3:");
      if (this.var3 == null) {
        sb.append("null");
      } else {
        sb.append(this.var3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("var4:");
      if (this.var4 == null) {
        sb.append("null");
      } else {
        sb.append(this.var4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("comp:");
      if (this.comp == null) {
        sb.append("null");
      } else {
        sb.append(this.comp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Venue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Venue_argsStandardScheme getScheme() {
        return new Venue_argsStandardScheme();
      }
    }

    private static class Venue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Venue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Venue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.var1 = iprot.readString();
                struct.setVar1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VAR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.var2 = iprot.readString();
                struct.setVar2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VAR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.var3 = iprot.readString();
                struct.setVar3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VAR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.var4 = iprot.readString();
                struct.setVar4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.comp = iprot.readString();
                struct.setCompIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Venue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.var1 != null) {
          oprot.writeFieldBegin(VAR1_FIELD_DESC);
          oprot.writeString(struct.var1);
          oprot.writeFieldEnd();
        }
        if (struct.var2 != null) {
          oprot.writeFieldBegin(VAR2_FIELD_DESC);
          oprot.writeString(struct.var2);
          oprot.writeFieldEnd();
        }
        if (struct.var3 != null) {
          oprot.writeFieldBegin(VAR3_FIELD_DESC);
          oprot.writeString(struct.var3);
          oprot.writeFieldEnd();
        }
        if (struct.var4 != null) {
          oprot.writeFieldBegin(VAR4_FIELD_DESC);
          oprot.writeString(struct.var4);
          oprot.writeFieldEnd();
        }
        if (struct.comp != null) {
          oprot.writeFieldBegin(COMP_FIELD_DESC);
          oprot.writeString(struct.comp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Venue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Venue_argsTupleScheme getScheme() {
        return new Venue_argsTupleScheme();
      }
    }

    private static class Venue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Venue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Venue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVar1()) {
          optionals.set(0);
        }
        if (struct.isSetVar2()) {
          optionals.set(1);
        }
        if (struct.isSetVar3()) {
          optionals.set(2);
        }
        if (struct.isSetVar4()) {
          optionals.set(3);
        }
        if (struct.isSetComp()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVar1()) {
          oprot.writeString(struct.var1);
        }
        if (struct.isSetVar2()) {
          oprot.writeString(struct.var2);
        }
        if (struct.isSetVar3()) {
          oprot.writeString(struct.var3);
        }
        if (struct.isSetVar4()) {
          oprot.writeString(struct.var4);
        }
        if (struct.isSetComp()) {
          oprot.writeString(struct.comp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Venue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.var1 = iprot.readString();
          struct.setVar1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.var2 = iprot.readString();
          struct.setVar2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.var3 = iprot.readString();
          struct.setVar3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.var4 = iprot.readString();
          struct.setVar4IsSet(true);
        }
        if (incoming.get(4)) {
          struct.comp = iprot.readString();
          struct.setCompIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Venue_result implements org.apache.thrift.TBase<Venue_result, Venue_result._Fields>, java.io.Serializable, Cloneable, Comparable<Venue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Venue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Venue_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Venue_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Venue_result.class, metaDataMap);
    }

    public Venue_result() {
    }

    public Venue_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Venue_result(Venue_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Venue_result deepCopy() {
      return new Venue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public Venue_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Venue_result)
        return this.equals((Venue_result)that);
      return false;
    }

    public boolean equals(Venue_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Venue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Venue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Venue_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Venue_resultStandardScheme getScheme() {
        return new Venue_resultStandardScheme();
      }
    }

    private static class Venue_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Venue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Venue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Venue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Venue_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Venue_resultTupleScheme getScheme() {
        return new Venue_resultTupleScheme();
      }
    }

    private static class Venue_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Venue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Venue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Venue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Evento_args implements org.apache.thrift.TBase<Evento_args, Evento_args._Fields>, java.io.Serializable, Cloneable, Comparable<Evento_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Evento_args");

    private static final org.apache.thrift.protocol.TField RAR1_FIELD_DESC = new org.apache.thrift.protocol.TField("rar1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RAR2_FIELD_DESC = new org.apache.thrift.protocol.TField("rar2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RAR3_FIELD_DESC = new org.apache.thrift.protocol.TField("rar3", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RAR4_FIELD_DESC = new org.apache.thrift.protocol.TField("rar4", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONC_FIELD_DESC = new org.apache.thrift.protocol.TField("conc", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Evento_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Evento_argsTupleSchemeFactory();

    public java.lang.String rar1; // required
    public java.lang.String rar2; // required
    public java.lang.String rar3; // required
    public java.lang.String rar4; // required
    public java.lang.String conc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RAR1((short)1, "rar1"),
      RAR2((short)2, "rar2"),
      RAR3((short)3, "rar3"),
      RAR4((short)4, "rar4"),
      CONC((short)5, "conc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RAR1
            return RAR1;
          case 2: // RAR2
            return RAR2;
          case 3: // RAR3
            return RAR3;
          case 4: // RAR4
            return RAR4;
          case 5: // CONC
            return CONC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RAR1, new org.apache.thrift.meta_data.FieldMetaData("rar1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RAR2, new org.apache.thrift.meta_data.FieldMetaData("rar2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RAR3, new org.apache.thrift.meta_data.FieldMetaData("rar3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RAR4, new org.apache.thrift.meta_data.FieldMetaData("rar4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONC, new org.apache.thrift.meta_data.FieldMetaData("conc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Evento_args.class, metaDataMap);
    }

    public Evento_args() {
    }

    public Evento_args(
      java.lang.String rar1,
      java.lang.String rar2,
      java.lang.String rar3,
      java.lang.String rar4,
      java.lang.String conc)
    {
      this();
      this.rar1 = rar1;
      this.rar2 = rar2;
      this.rar3 = rar3;
      this.rar4 = rar4;
      this.conc = conc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Evento_args(Evento_args other) {
      if (other.isSetRar1()) {
        this.rar1 = other.rar1;
      }
      if (other.isSetRar2()) {
        this.rar2 = other.rar2;
      }
      if (other.isSetRar3()) {
        this.rar3 = other.rar3;
      }
      if (other.isSetRar4()) {
        this.rar4 = other.rar4;
      }
      if (other.isSetConc()) {
        this.conc = other.conc;
      }
    }

    public Evento_args deepCopy() {
      return new Evento_args(this);
    }

    @Override
    public void clear() {
      this.rar1 = null;
      this.rar2 = null;
      this.rar3 = null;
      this.rar4 = null;
      this.conc = null;
    }

    public java.lang.String getRar1() {
      return this.rar1;
    }

    public Evento_args setRar1(java.lang.String rar1) {
      this.rar1 = rar1;
      return this;
    }

    public void unsetRar1() {
      this.rar1 = null;
    }

    /** Returns true if field rar1 is set (has been assigned a value) and false otherwise */
    public boolean isSetRar1() {
      return this.rar1 != null;
    }

    public void setRar1IsSet(boolean value) {
      if (!value) {
        this.rar1 = null;
      }
    }

    public java.lang.String getRar2() {
      return this.rar2;
    }

    public Evento_args setRar2(java.lang.String rar2) {
      this.rar2 = rar2;
      return this;
    }

    public void unsetRar2() {
      this.rar2 = null;
    }

    /** Returns true if field rar2 is set (has been assigned a value) and false otherwise */
    public boolean isSetRar2() {
      return this.rar2 != null;
    }

    public void setRar2IsSet(boolean value) {
      if (!value) {
        this.rar2 = null;
      }
    }

    public java.lang.String getRar3() {
      return this.rar3;
    }

    public Evento_args setRar3(java.lang.String rar3) {
      this.rar3 = rar3;
      return this;
    }

    public void unsetRar3() {
      this.rar3 = null;
    }

    /** Returns true if field rar3 is set (has been assigned a value) and false otherwise */
    public boolean isSetRar3() {
      return this.rar3 != null;
    }

    public void setRar3IsSet(boolean value) {
      if (!value) {
        this.rar3 = null;
      }
    }

    public java.lang.String getRar4() {
      return this.rar4;
    }

    public Evento_args setRar4(java.lang.String rar4) {
      this.rar4 = rar4;
      return this;
    }

    public void unsetRar4() {
      this.rar4 = null;
    }

    /** Returns true if field rar4 is set (has been assigned a value) and false otherwise */
    public boolean isSetRar4() {
      return this.rar4 != null;
    }

    public void setRar4IsSet(boolean value) {
      if (!value) {
        this.rar4 = null;
      }
    }

    public java.lang.String getConc() {
      return this.conc;
    }

    public Evento_args setConc(java.lang.String conc) {
      this.conc = conc;
      return this;
    }

    public void unsetConc() {
      this.conc = null;
    }

    /** Returns true if field conc is set (has been assigned a value) and false otherwise */
    public boolean isSetConc() {
      return this.conc != null;
    }

    public void setConcIsSet(boolean value) {
      if (!value) {
        this.conc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RAR1:
        if (value == null) {
          unsetRar1();
        } else {
          setRar1((java.lang.String)value);
        }
        break;

      case RAR2:
        if (value == null) {
          unsetRar2();
        } else {
          setRar2((java.lang.String)value);
        }
        break;

      case RAR3:
        if (value == null) {
          unsetRar3();
        } else {
          setRar3((java.lang.String)value);
        }
        break;

      case RAR4:
        if (value == null) {
          unsetRar4();
        } else {
          setRar4((java.lang.String)value);
        }
        break;

      case CONC:
        if (value == null) {
          unsetConc();
        } else {
          setConc((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RAR1:
        return getRar1();

      case RAR2:
        return getRar2();

      case RAR3:
        return getRar3();

      case RAR4:
        return getRar4();

      case CONC:
        return getConc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RAR1:
        return isSetRar1();
      case RAR2:
        return isSetRar2();
      case RAR3:
        return isSetRar3();
      case RAR4:
        return isSetRar4();
      case CONC:
        return isSetConc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Evento_args)
        return this.equals((Evento_args)that);
      return false;
    }

    public boolean equals(Evento_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rar1 = true && this.isSetRar1();
      boolean that_present_rar1 = true && that.isSetRar1();
      if (this_present_rar1 || that_present_rar1) {
        if (!(this_present_rar1 && that_present_rar1))
          return false;
        if (!this.rar1.equals(that.rar1))
          return false;
      }

      boolean this_present_rar2 = true && this.isSetRar2();
      boolean that_present_rar2 = true && that.isSetRar2();
      if (this_present_rar2 || that_present_rar2) {
        if (!(this_present_rar2 && that_present_rar2))
          return false;
        if (!this.rar2.equals(that.rar2))
          return false;
      }

      boolean this_present_rar3 = true && this.isSetRar3();
      boolean that_present_rar3 = true && that.isSetRar3();
      if (this_present_rar3 || that_present_rar3) {
        if (!(this_present_rar3 && that_present_rar3))
          return false;
        if (!this.rar3.equals(that.rar3))
          return false;
      }

      boolean this_present_rar4 = true && this.isSetRar4();
      boolean that_present_rar4 = true && that.isSetRar4();
      if (this_present_rar4 || that_present_rar4) {
        if (!(this_present_rar4 && that_present_rar4))
          return false;
        if (!this.rar4.equals(that.rar4))
          return false;
      }

      boolean this_present_conc = true && this.isSetConc();
      boolean that_present_conc = true && that.isSetConc();
      if (this_present_conc || that_present_conc) {
        if (!(this_present_conc && that_present_conc))
          return false;
        if (!this.conc.equals(that.conc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRar1()) ? 131071 : 524287);
      if (isSetRar1())
        hashCode = hashCode * 8191 + rar1.hashCode();

      hashCode = hashCode * 8191 + ((isSetRar2()) ? 131071 : 524287);
      if (isSetRar2())
        hashCode = hashCode * 8191 + rar2.hashCode();

      hashCode = hashCode * 8191 + ((isSetRar3()) ? 131071 : 524287);
      if (isSetRar3())
        hashCode = hashCode * 8191 + rar3.hashCode();

      hashCode = hashCode * 8191 + ((isSetRar4()) ? 131071 : 524287);
      if (isSetRar4())
        hashCode = hashCode * 8191 + rar4.hashCode();

      hashCode = hashCode * 8191 + ((isSetConc()) ? 131071 : 524287);
      if (isSetConc())
        hashCode = hashCode * 8191 + conc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Evento_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRar1()).compareTo(other.isSetRar1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRar1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rar1, other.rar1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRar2()).compareTo(other.isSetRar2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRar2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rar2, other.rar2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRar3()).compareTo(other.isSetRar3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRar3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rar3, other.rar3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRar4()).compareTo(other.isSetRar4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRar4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rar4, other.rar4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConc()).compareTo(other.isSetConc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conc, other.conc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Evento_args(");
      boolean first = true;

      sb.append("rar1:");
      if (this.rar1 == null) {
        sb.append("null");
      } else {
        sb.append(this.rar1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rar2:");
      if (this.rar2 == null) {
        sb.append("null");
      } else {
        sb.append(this.rar2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rar3:");
      if (this.rar3 == null) {
        sb.append("null");
      } else {
        sb.append(this.rar3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rar4:");
      if (this.rar4 == null) {
        sb.append("null");
      } else {
        sb.append(this.rar4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("conc:");
      if (this.conc == null) {
        sb.append("null");
      } else {
        sb.append(this.conc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Evento_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Evento_argsStandardScheme getScheme() {
        return new Evento_argsStandardScheme();
      }
    }

    private static class Evento_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Evento_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Evento_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RAR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rar1 = iprot.readString();
                struct.setRar1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RAR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rar2 = iprot.readString();
                struct.setRar2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RAR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rar3 = iprot.readString();
                struct.setRar3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RAR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rar4 = iprot.readString();
                struct.setRar4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.conc = iprot.readString();
                struct.setConcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Evento_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rar1 != null) {
          oprot.writeFieldBegin(RAR1_FIELD_DESC);
          oprot.writeString(struct.rar1);
          oprot.writeFieldEnd();
        }
        if (struct.rar2 != null) {
          oprot.writeFieldBegin(RAR2_FIELD_DESC);
          oprot.writeString(struct.rar2);
          oprot.writeFieldEnd();
        }
        if (struct.rar3 != null) {
          oprot.writeFieldBegin(RAR3_FIELD_DESC);
          oprot.writeString(struct.rar3);
          oprot.writeFieldEnd();
        }
        if (struct.rar4 != null) {
          oprot.writeFieldBegin(RAR4_FIELD_DESC);
          oprot.writeString(struct.rar4);
          oprot.writeFieldEnd();
        }
        if (struct.conc != null) {
          oprot.writeFieldBegin(CONC_FIELD_DESC);
          oprot.writeString(struct.conc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Evento_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Evento_argsTupleScheme getScheme() {
        return new Evento_argsTupleScheme();
      }
    }

    private static class Evento_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Evento_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Evento_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRar1()) {
          optionals.set(0);
        }
        if (struct.isSetRar2()) {
          optionals.set(1);
        }
        if (struct.isSetRar3()) {
          optionals.set(2);
        }
        if (struct.isSetRar4()) {
          optionals.set(3);
        }
        if (struct.isSetConc()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRar1()) {
          oprot.writeString(struct.rar1);
        }
        if (struct.isSetRar2()) {
          oprot.writeString(struct.rar2);
        }
        if (struct.isSetRar3()) {
          oprot.writeString(struct.rar3);
        }
        if (struct.isSetRar4()) {
          oprot.writeString(struct.rar4);
        }
        if (struct.isSetConc()) {
          oprot.writeString(struct.conc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Evento_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rar1 = iprot.readString();
          struct.setRar1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.rar2 = iprot.readString();
          struct.setRar2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.rar3 = iprot.readString();
          struct.setRar3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.rar4 = iprot.readString();
          struct.setRar4IsSet(true);
        }
        if (incoming.get(4)) {
          struct.conc = iprot.readString();
          struct.setConcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Evento_result implements org.apache.thrift.TBase<Evento_result, Evento_result._Fields>, java.io.Serializable, Cloneable, Comparable<Evento_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Evento_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Evento_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Evento_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Evento_result.class, metaDataMap);
    }

    public Evento_result() {
    }

    public Evento_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Evento_result(Evento_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Evento_result deepCopy() {
      return new Evento_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public Evento_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Evento_result)
        return this.equals((Evento_result)that);
      return false;
    }

    public boolean equals(Evento_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Evento_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Evento_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Evento_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Evento_resultStandardScheme getScheme() {
        return new Evento_resultStandardScheme();
      }
    }

    private static class Evento_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Evento_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Evento_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Evento_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Evento_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Evento_resultTupleScheme getScheme() {
        return new Evento_resultTupleScheme();
      }
    }

    private static class Evento_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Evento_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Evento_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Evento_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Login_args implements org.apache.thrift.TBase<Login_args, Login_args._Fields>, java.io.Serializable, Cloneable, Comparable<Login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Login_args");

    private static final org.apache.thrift.protocol.TField SAS1_FIELD_DESC = new org.apache.thrift.protocol.TField("sas1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SAS2_FIELD_DESC = new org.apache.thrift.protocol.TField("sas2", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Login_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Login_argsTupleSchemeFactory();

    public java.lang.String sas1; // required
    public java.lang.String sas2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SAS1((short)1, "sas1"),
      SAS2((short)2, "sas2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAS1
            return SAS1;
          case 2: // SAS2
            return SAS2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAS1, new org.apache.thrift.meta_data.FieldMetaData("sas1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SAS2, new org.apache.thrift.meta_data.FieldMetaData("sas2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Login_args.class, metaDataMap);
    }

    public Login_args() {
    }

    public Login_args(
      java.lang.String sas1,
      java.lang.String sas2)
    {
      this();
      this.sas1 = sas1;
      this.sas2 = sas2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Login_args(Login_args other) {
      if (other.isSetSas1()) {
        this.sas1 = other.sas1;
      }
      if (other.isSetSas2()) {
        this.sas2 = other.sas2;
      }
    }

    public Login_args deepCopy() {
      return new Login_args(this);
    }

    @Override
    public void clear() {
      this.sas1 = null;
      this.sas2 = null;
    }

    public java.lang.String getSas1() {
      return this.sas1;
    }

    public Login_args setSas1(java.lang.String sas1) {
      this.sas1 = sas1;
      return this;
    }

    public void unsetSas1() {
      this.sas1 = null;
    }

    /** Returns true if field sas1 is set (has been assigned a value) and false otherwise */
    public boolean isSetSas1() {
      return this.sas1 != null;
    }

    public void setSas1IsSet(boolean value) {
      if (!value) {
        this.sas1 = null;
      }
    }

    public java.lang.String getSas2() {
      return this.sas2;
    }

    public Login_args setSas2(java.lang.String sas2) {
      this.sas2 = sas2;
      return this;
    }

    public void unsetSas2() {
      this.sas2 = null;
    }

    /** Returns true if field sas2 is set (has been assigned a value) and false otherwise */
    public boolean isSetSas2() {
      return this.sas2 != null;
    }

    public void setSas2IsSet(boolean value) {
      if (!value) {
        this.sas2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SAS1:
        if (value == null) {
          unsetSas1();
        } else {
          setSas1((java.lang.String)value);
        }
        break;

      case SAS2:
        if (value == null) {
          unsetSas2();
        } else {
          setSas2((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SAS1:
        return getSas1();

      case SAS2:
        return getSas2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SAS1:
        return isSetSas1();
      case SAS2:
        return isSetSas2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Login_args)
        return this.equals((Login_args)that);
      return false;
    }

    public boolean equals(Login_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sas1 = true && this.isSetSas1();
      boolean that_present_sas1 = true && that.isSetSas1();
      if (this_present_sas1 || that_present_sas1) {
        if (!(this_present_sas1 && that_present_sas1))
          return false;
        if (!this.sas1.equals(that.sas1))
          return false;
      }

      boolean this_present_sas2 = true && this.isSetSas2();
      boolean that_present_sas2 = true && that.isSetSas2();
      if (this_present_sas2 || that_present_sas2) {
        if (!(this_present_sas2 && that_present_sas2))
          return false;
        if (!this.sas2.equals(that.sas2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSas1()) ? 131071 : 524287);
      if (isSetSas1())
        hashCode = hashCode * 8191 + sas1.hashCode();

      hashCode = hashCode * 8191 + ((isSetSas2()) ? 131071 : 524287);
      if (isSetSas2())
        hashCode = hashCode * 8191 + sas2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSas1()).compareTo(other.isSetSas1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSas1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sas1, other.sas1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSas2()).compareTo(other.isSetSas2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSas2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sas2, other.sas2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Login_args(");
      boolean first = true;

      sb.append("sas1:");
      if (this.sas1 == null) {
        sb.append("null");
      } else {
        sb.append(this.sas1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sas2:");
      if (this.sas2 == null) {
        sb.append("null");
      } else {
        sb.append(this.sas2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Login_argsStandardScheme getScheme() {
        return new Login_argsStandardScheme();
      }
    }

    private static class Login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAS1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sas1 = iprot.readString();
                struct.setSas1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SAS2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sas2 = iprot.readString();
                struct.setSas2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sas1 != null) {
          oprot.writeFieldBegin(SAS1_FIELD_DESC);
          oprot.writeString(struct.sas1);
          oprot.writeFieldEnd();
        }
        if (struct.sas2 != null) {
          oprot.writeFieldBegin(SAS2_FIELD_DESC);
          oprot.writeString(struct.sas2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Login_argsTupleScheme getScheme() {
        return new Login_argsTupleScheme();
      }
    }

    private static class Login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSas1()) {
          optionals.set(0);
        }
        if (struct.isSetSas2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSas1()) {
          oprot.writeString(struct.sas1);
        }
        if (struct.isSetSas2()) {
          oprot.writeString(struct.sas2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sas1 = iprot.readString();
          struct.setSas1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.sas2 = iprot.readString();
          struct.setSas2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Login_result implements org.apache.thrift.TBase<Login_result, Login_result._Fields>, java.io.Serializable, Cloneable, Comparable<Login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Login_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Login_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Login_result.class, metaDataMap);
    }

    public Login_result() {
    }

    public Login_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Login_result(Login_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Login_result deepCopy() {
      return new Login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public Login_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Login_result)
        return this.equals((Login_result)that);
      return false;
    }

    public boolean equals(Login_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Login_resultStandardScheme getScheme() {
        return new Login_resultStandardScheme();
      }
    }

    private static class Login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Login_resultTupleScheme getScheme() {
        return new Login_resultTupleScheme();
      }
    }

    private static class Login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Mostrar_args implements org.apache.thrift.TBase<Mostrar_args, Mostrar_args._Fields>, java.io.Serializable, Cloneable, Comparable<Mostrar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mostrar_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Mostrar_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Mostrar_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mostrar_args.class, metaDataMap);
    }

    public Mostrar_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mostrar_args(Mostrar_args other) {
    }

    public Mostrar_args deepCopy() {
      return new Mostrar_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Mostrar_args)
        return this.equals((Mostrar_args)that);
      return false;
    }

    public boolean equals(Mostrar_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Mostrar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Mostrar_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mostrar_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Mostrar_argsStandardScheme getScheme() {
        return new Mostrar_argsStandardScheme();
      }
    }

    private static class Mostrar_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Mostrar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mostrar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mostrar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mostrar_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Mostrar_argsTupleScheme getScheme() {
        return new Mostrar_argsTupleScheme();
      }
    }

    private static class Mostrar_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Mostrar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mostrar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mostrar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Mostrar_result implements org.apache.thrift.TBase<Mostrar_result, Mostrar_result._Fields>, java.io.Serializable, Cloneable, Comparable<Mostrar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mostrar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Mostrar_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Mostrar_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mostrar_result.class, metaDataMap);
    }

    public Mostrar_result() {
    }

    public Mostrar_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mostrar_result(Mostrar_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public Mostrar_result deepCopy() {
      return new Mostrar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public Mostrar_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Mostrar_result)
        return this.equals((Mostrar_result)that);
      return false;
    }

    public boolean equals(Mostrar_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Mostrar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Mostrar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mostrar_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Mostrar_resultStandardScheme getScheme() {
        return new Mostrar_resultStandardScheme();
      }
    }

    private static class Mostrar_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Mostrar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mostrar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mostrar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mostrar_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Mostrar_resultTupleScheme getScheme() {
        return new Mostrar_resultTupleScheme();
      }
    }

    private static class Mostrar_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Mostrar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mostrar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mostrar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
